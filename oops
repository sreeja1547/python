from abc import ABC, abstractmethod

# ------------------ Abstract Class (Abstraction) ------------------
class Account(ABC):
    def __init__(self, acc_no, balance=0):
        self._acc_no = acc_no           # Encapsulation: protected attribute
        self._balance = balance
        print(f"Account {self._acc_no} created with balance ₹{self._balance}")

    @abstractmethod
    def deposit(self, amount):
        pass

    @abstractmethod
    def withdraw(self, amount):
        pass

    def get_balance(self):
        return self._balance

    def __del__(self):
        print(f"Account {self._acc_no} closed.")

# ------------------ Derived Class (Inheritance + Polymorphism) ------------------
class SavingsAccount(Account):
    interest_rate = 0.04  # Class variable

    def deposit(self, amount):
        if amount > 0:
            self._balance += amount
            print(f"Deposited ₹{amount}. New balance: ₹{self._balance}")
        else:
            print("Deposit amount must be positive!")

    def withdraw(self, amount):
        if amount <= self._balance:
            self._balance -= amount
            print(f"Withdrew ₹{amount}. Remaining balance: ₹{self._balance}")
        else:
            print("Insufficient balance!")

    # Operator Overloading
    def __add__(self, other):
        return self._balance + other._balance

    @classmethod
    def set_interest_rate(cls, rate):
        cls.interest_rate = rate

    @staticmethod
    def bank_info():
        print("🏦 Welcome to Python Bank — Safe, Simple, Smart Banking!")

# ------------------ Composition Example ------------------
class Customer:
    def __init__(self, name, age, account):
        self.name = name
        self.age = age
        self.account = account  # Composition: Customer “has-an” Account

    def display(self):
        print(f"\nCustomer: {self.name}, Age: {self.age}, Account No: {self.account._acc_no}")
        print(f"Current Balance: ₹{self.account.get_balance()}")

# ------------------ File Handling (Save customer details) ------------------
def save_to_file(customer):
    with open("bank_data.txt", "a") as f:
        f.write(f"{customer.name},{customer.age},{customer.account._acc_no},{customer.account.get_balance()}\n")
    print("✅ Customer data saved to file.")

# ------------------ Main Function ------------------
def main():
    SavingsAccount.bank_info()
    print("\n--- Creating Accounts ---")
    acc1 = SavingsAccount(1001, 5000)
    acc2 = SavingsAccount(1002, 8000)

    cust1 = Customer("Alice", 30, acc1)
    cust2 = Customer("Bob", 40, acc2)

    print("\n--- Transactions ---")
    acc1.deposit(2000)
    acc1.withdraw(1500)
    acc2.deposit(3000)
    acc2.withdraw(5000)

    print("\n--- Customer Details ---")
    cust1.display()
    cust2.display()

    print("\n--- Operator Overloading ---")
    total_balance = acc1 + acc2
    print(f"Total Balance in both accounts: ₹{total_balance}")

    print("\n--- Class and Static Methods ---")
    SavingsAccount.set_interest_rate(0.05)
    print(f"Updated Interest Rate: {SavingsAccount.interest_rate}")

    save_to_file(cust1)
    save_to_file(cust2)
